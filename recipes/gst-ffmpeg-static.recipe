# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
import os
from cerbero.utils import shell


class Recipe(custom.GStreamerStatic):
    name = 'gst-ffmpeg-static'
    version = '0.10.13'
    # TODO - check license, plugin is certainly LGPLv2+, but need to check
    #        the linked libs
    licenses = [License.LGPLv2Plus]
    extra_configure_options = " --enable-lgpl --disable-examples "
    plugins_categories = ['codecs']
    deps = ['gstreamer', 'gst-plugins-base', 'bzip2', 'zlib' ]

    files_codecs_devel = ['libgstffmpeg']

    def prepare(self):
        if self.config.target_platform == Platform.WINDOWS:
            self.configure_options += \
                    '--with-ffmpeg-extra-configure="--enable-w32threads"'

        if self.config.target_platform == Platform.DARWIN:
            if self.config.target_arch == Architecture.X86_64:
                asflags = ' -arch x86_64 -m64'
            elif self.config.target_arch == Architecture.X86:
                asflags = ' -arch i386 -m32'
            elif self.config.target_arch == Architecture.PPC:
                asflags = ' -arch ppc'
            self.configure_options += ' ASFLAGS="%s"' % asflags
        super(Recipe, self).prepare()

    def configure(self):
        if self.config.target_platform == Platform.WINDOWS:
            opts = '--cross-prefix=%s- --target-os=mingw32 --arch=%s' %\
                (self.config.host, self.config.target_arch)
            opts_file = os.path.join(self.build_dir, 'ffmpeg_extra_configure_options')
            with open(opts_file, 'w+') as f:
                f.write(opts)
        super(Recipe, self).configure()
        if self.config.target_platform == Platform.DARWIN:
            if self.config.target_arch == Architecture.X86:
                libav_path = os.path.join(self.build_dir, 'gst-libs', 'ext', 'libav')
                replacements = {'HAVE_EBX_AVAILABLE=yes': 'HAVE_EBX_AVAILABLE=no',
                                'HAVE_EBX_AVAILABLE 1': 'HAVE_EBX_AVAILABLE 0',}
                shell.replace(os.path.join(libav_path, 'config.mak'), replacements)
                shell.replace(os.path.join(libav_path, 'config.h'), replacements)
